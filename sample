{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled18.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNQSjVlX3P7XMjdpGH5H8Gv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aneeshcheriank/hands-own-machine-learning/blob/main/sample\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aErjS3RTpYoH"
      },
      "source": [
        "# install kaggle\n",
        "! pip install -q kaggle"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "tbKQoAPSp-to",
        "outputId": "14fe7867-df2c-4ab1-f4c7-24dba9bea3b3"
      },
      "source": [
        "# export data to colab\n",
        "from google.colab import files\n",
        "path = files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1a457622-86b3-498d-a92c-43ba76bc7051\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1a457622-86b3-498d-a92c-43ba76bc7051\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9hdX7dw0p_j_"
      },
      "source": [
        "# create a kaggle folder\n",
        "!mkdir ~/.kaggle\n",
        "!cp kaggle.json ~/.kaggle/\n",
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "deE3CXulqDhl",
        "outputId": "59a36289-408c-49c6-ee5f-0b0227e9d5b3"
      },
      "source": [
        "# download the data from Kaggle\n",
        "!kaggle competitions download -c tabular-playground-series-nov-2021"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.12 / client 1.5.4)\n",
            "Downloading sample_submission.csv.zip to /content\n",
            "  0% 0.00/1.16M [00:00<?, ?B/s]\n",
            "100% 1.16M/1.16M [00:00<00:00, 39.3MB/s]\n",
            "Downloading train.csv.zip to /content\n",
            " 96% 215M/225M [00:04<00:00, 62.0MB/s]\n",
            "100% 225M/225M [00:04<00:00, 53.3MB/s]\n",
            "Downloading test.csv.zip to /content\n",
            " 94% 189M/202M [00:03<00:00, 63.0MB/s]\n",
            "100% 202M/202M [00:03<00:00, 60.8MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-Bb1OkrQpoVY"
      },
      "source": [
        "# import required libs\n",
        "import zipfile\n",
        "import os\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "jXDMb7gXprmR",
        "outputId": "e538a5d2-14b8-4909-982b-eca03e2cec73"
      },
      "source": [
        "# Extract the zip file\n",
        "os.makedirs('./data/extract', exist_ok=True)\n",
        "with zipfile.ZipFile('./train.csv.zip') as z:\n",
        "    z.extractall('./data/extract')\n",
        "    \n",
        "os.listdir('./data/extract')\n",
        "\n",
        "\n",
        "# read the data\n",
        "data = pd.read_csv('./data/extract/train.csv')\n",
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>f0</th>\n",
              "      <th>f1</th>\n",
              "      <th>f2</th>\n",
              "      <th>f3</th>\n",
              "      <th>f4</th>\n",
              "      <th>f5</th>\n",
              "      <th>f6</th>\n",
              "      <th>f7</th>\n",
              "      <th>f8</th>\n",
              "      <th>f9</th>\n",
              "      <th>f10</th>\n",
              "      <th>f11</th>\n",
              "      <th>f12</th>\n",
              "      <th>f13</th>\n",
              "      <th>f14</th>\n",
              "      <th>f15</th>\n",
              "      <th>f16</th>\n",
              "      <th>f17</th>\n",
              "      <th>f18</th>\n",
              "      <th>f19</th>\n",
              "      <th>f20</th>\n",
              "      <th>f21</th>\n",
              "      <th>f22</th>\n",
              "      <th>f23</th>\n",
              "      <th>f24</th>\n",
              "      <th>f25</th>\n",
              "      <th>f26</th>\n",
              "      <th>f27</th>\n",
              "      <th>f28</th>\n",
              "      <th>f29</th>\n",
              "      <th>f30</th>\n",
              "      <th>f31</th>\n",
              "      <th>f32</th>\n",
              "      <th>f33</th>\n",
              "      <th>f34</th>\n",
              "      <th>f35</th>\n",
              "      <th>f36</th>\n",
              "      <th>f37</th>\n",
              "      <th>f38</th>\n",
              "      <th>...</th>\n",
              "      <th>f61</th>\n",
              "      <th>f62</th>\n",
              "      <th>f63</th>\n",
              "      <th>f64</th>\n",
              "      <th>f65</th>\n",
              "      <th>f66</th>\n",
              "      <th>f67</th>\n",
              "      <th>f68</th>\n",
              "      <th>f69</th>\n",
              "      <th>f70</th>\n",
              "      <th>f71</th>\n",
              "      <th>f72</th>\n",
              "      <th>f73</th>\n",
              "      <th>f74</th>\n",
              "      <th>f75</th>\n",
              "      <th>f76</th>\n",
              "      <th>f77</th>\n",
              "      <th>f78</th>\n",
              "      <th>f79</th>\n",
              "      <th>f80</th>\n",
              "      <th>f81</th>\n",
              "      <th>f82</th>\n",
              "      <th>f83</th>\n",
              "      <th>f84</th>\n",
              "      <th>f85</th>\n",
              "      <th>f86</th>\n",
              "      <th>f87</th>\n",
              "      <th>f88</th>\n",
              "      <th>f89</th>\n",
              "      <th>f90</th>\n",
              "      <th>f91</th>\n",
              "      <th>f92</th>\n",
              "      <th>f93</th>\n",
              "      <th>f94</th>\n",
              "      <th>f95</th>\n",
              "      <th>f96</th>\n",
              "      <th>f97</th>\n",
              "      <th>f98</th>\n",
              "      <th>f99</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.106643</td>\n",
              "      <td>3.59437</td>\n",
              "      <td>132.8040</td>\n",
              "      <td>3.18428</td>\n",
              "      <td>0.081971</td>\n",
              "      <td>1.18859</td>\n",
              "      <td>3.73238</td>\n",
              "      <td>2.266270</td>\n",
              "      <td>2.09959</td>\n",
              "      <td>0.012330</td>\n",
              "      <td>1.607190</td>\n",
              "      <td>-0.318058</td>\n",
              "      <td>0.560137</td>\n",
              "      <td>2.806880</td>\n",
              "      <td>1.35114</td>\n",
              "      <td>2.535930</td>\n",
              "      <td>0.197527</td>\n",
              "      <td>0.676494</td>\n",
              "      <td>1.98979</td>\n",
              "      <td>-3.842450</td>\n",
              "      <td>0.037380</td>\n",
              "      <td>0.230322</td>\n",
              "      <td>3.33055</td>\n",
              "      <td>0.009397</td>\n",
              "      <td>0.144738</td>\n",
              "      <td>3.05131</td>\n",
              "      <td>1.30362</td>\n",
              "      <td>0.033225</td>\n",
              "      <td>-0.018284</td>\n",
              "      <td>2.748210</td>\n",
              "      <td>-0.009294</td>\n",
              "      <td>-0.036271</td>\n",
              "      <td>-0.049871</td>\n",
              "      <td>0.019484</td>\n",
              "      <td>3.898460</td>\n",
              "      <td>11.2863</td>\n",
              "      <td>1.138020</td>\n",
              "      <td>3.366880</td>\n",
              "      <td>4.94446</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.027551</td>\n",
              "      <td>0.019483</td>\n",
              "      <td>-0.048826</td>\n",
              "      <td>0.050748</td>\n",
              "      <td>3.729300</td>\n",
              "      <td>5.017440</td>\n",
              "      <td>4.186880</td>\n",
              "      <td>0.063342</td>\n",
              "      <td>0.121043</td>\n",
              "      <td>1.37175</td>\n",
              "      <td>4.017450</td>\n",
              "      <td>0.167613</td>\n",
              "      <td>0.039754</td>\n",
              "      <td>2.042360</td>\n",
              "      <td>-0.016614</td>\n",
              "      <td>0.107679</td>\n",
              "      <td>3.507250</td>\n",
              "      <td>0.013660</td>\n",
              "      <td>-0.097023</td>\n",
              "      <td>5.396070</td>\n",
              "      <td>0.244457</td>\n",
              "      <td>3.49184</td>\n",
              "      <td>0.113090</td>\n",
              "      <td>-0.015472</td>\n",
              "      <td>4.208790</td>\n",
              "      <td>4.106560</td>\n",
              "      <td>0.037227</td>\n",
              "      <td>-0.118814</td>\n",
              "      <td>0.067086</td>\n",
              "      <td>0.010739</td>\n",
              "      <td>1.09862</td>\n",
              "      <td>0.013331</td>\n",
              "      <td>-0.011715</td>\n",
              "      <td>0.052759</td>\n",
              "      <td>0.065400</td>\n",
              "      <td>4.211250</td>\n",
              "      <td>1.97877</td>\n",
              "      <td>0.085974</td>\n",
              "      <td>0.240496</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0.125021</td>\n",
              "      <td>1.67336</td>\n",
              "      <td>76.5336</td>\n",
              "      <td>3.37825</td>\n",
              "      <td>0.099400</td>\n",
              "      <td>5.09366</td>\n",
              "      <td>1.27562</td>\n",
              "      <td>-0.471318</td>\n",
              "      <td>4.54594</td>\n",
              "      <td>0.037706</td>\n",
              "      <td>0.331749</td>\n",
              "      <td>0.325091</td>\n",
              "      <td>0.062040</td>\n",
              "      <td>2.262150</td>\n",
              "      <td>4.33943</td>\n",
              "      <td>-0.224999</td>\n",
              "      <td>0.233586</td>\n",
              "      <td>3.381280</td>\n",
              "      <td>1.90299</td>\n",
              "      <td>0.067874</td>\n",
              "      <td>-0.051268</td>\n",
              "      <td>0.006135</td>\n",
              "      <td>2.60444</td>\n",
              "      <td>0.103441</td>\n",
              "      <td>0.067638</td>\n",
              "      <td>4.75362</td>\n",
              "      <td>1.85552</td>\n",
              "      <td>-0.181834</td>\n",
              "      <td>0.008359</td>\n",
              "      <td>3.166340</td>\n",
              "      <td>0.011850</td>\n",
              "      <td>0.022292</td>\n",
              "      <td>0.069320</td>\n",
              "      <td>0.117109</td>\n",
              "      <td>0.315276</td>\n",
              "      <td>24.4807</td>\n",
              "      <td>1.672270</td>\n",
              "      <td>-0.409067</td>\n",
              "      <td>4.95475</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.010841</td>\n",
              "      <td>0.064584</td>\n",
              "      <td>0.102548</td>\n",
              "      <td>0.093611</td>\n",
              "      <td>0.964089</td>\n",
              "      <td>0.630422</td>\n",
              "      <td>4.307340</td>\n",
              "      <td>0.091289</td>\n",
              "      <td>-0.036360</td>\n",
              "      <td>3.61767</td>\n",
              "      <td>3.103240</td>\n",
              "      <td>0.000657</td>\n",
              "      <td>0.051302</td>\n",
              "      <td>1.924620</td>\n",
              "      <td>0.123294</td>\n",
              "      <td>-0.022671</td>\n",
              "      <td>1.548120</td>\n",
              "      <td>-0.010397</td>\n",
              "      <td>0.058330</td>\n",
              "      <td>3.661310</td>\n",
              "      <td>-0.118386</td>\n",
              "      <td>2.35739</td>\n",
              "      <td>-0.009112</td>\n",
              "      <td>0.178701</td>\n",
              "      <td>4.097350</td>\n",
              "      <td>3.532890</td>\n",
              "      <td>0.005244</td>\n",
              "      <td>0.121381</td>\n",
              "      <td>0.109968</td>\n",
              "      <td>0.135838</td>\n",
              "      <td>3.46017</td>\n",
              "      <td>0.017054</td>\n",
              "      <td>0.124863</td>\n",
              "      <td>0.154064</td>\n",
              "      <td>0.606848</td>\n",
              "      <td>-0.267928</td>\n",
              "      <td>2.57786</td>\n",
              "      <td>-0.020877</td>\n",
              "      <td>0.024719</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0.036330</td>\n",
              "      <td>1.49747</td>\n",
              "      <td>233.5460</td>\n",
              "      <td>2.19435</td>\n",
              "      <td>0.026914</td>\n",
              "      <td>3.12694</td>\n",
              "      <td>5.05687</td>\n",
              "      <td>3.849460</td>\n",
              "      <td>1.80187</td>\n",
              "      <td>0.056995</td>\n",
              "      <td>0.328684</td>\n",
              "      <td>2.968810</td>\n",
              "      <td>0.105244</td>\n",
              "      <td>2.069490</td>\n",
              "      <td>5.30986</td>\n",
              "      <td>1.354790</td>\n",
              "      <td>-0.262018</td>\n",
              "      <td>1.379080</td>\n",
              "      <td>1.48091</td>\n",
              "      <td>0.020542</td>\n",
              "      <td>-0.008806</td>\n",
              "      <td>0.109348</td>\n",
              "      <td>1.68365</td>\n",
              "      <td>0.038180</td>\n",
              "      <td>0.123716</td>\n",
              "      <td>1.11248</td>\n",
              "      <td>3.57166</td>\n",
              "      <td>0.120601</td>\n",
              "      <td>0.082069</td>\n",
              "      <td>2.233520</td>\n",
              "      <td>0.002270</td>\n",
              "      <td>0.045182</td>\n",
              "      <td>0.014405</td>\n",
              "      <td>0.011599</td>\n",
              "      <td>-0.502849</td>\n",
              "      <td>33.7382</td>\n",
              "      <td>1.417500</td>\n",
              "      <td>1.071350</td>\n",
              "      <td>3.22296</td>\n",
              "      <td>...</td>\n",
              "      <td>0.027571</td>\n",
              "      <td>-0.007121</td>\n",
              "      <td>-0.048914</td>\n",
              "      <td>-0.002574</td>\n",
              "      <td>1.865090</td>\n",
              "      <td>2.404170</td>\n",
              "      <td>0.411741</td>\n",
              "      <td>0.057749</td>\n",
              "      <td>0.525174</td>\n",
              "      <td>2.16879</td>\n",
              "      <td>0.828297</td>\n",
              "      <td>0.089848</td>\n",
              "      <td>0.093744</td>\n",
              "      <td>4.949010</td>\n",
              "      <td>-0.010978</td>\n",
              "      <td>0.076671</td>\n",
              "      <td>0.266784</td>\n",
              "      <td>0.038691</td>\n",
              "      <td>0.382731</td>\n",
              "      <td>3.847600</td>\n",
              "      <td>-0.121482</td>\n",
              "      <td>3.74084</td>\n",
              "      <td>0.147098</td>\n",
              "      <td>-0.016566</td>\n",
              "      <td>0.614651</td>\n",
              "      <td>2.125840</td>\n",
              "      <td>0.078828</td>\n",
              "      <td>0.979808</td>\n",
              "      <td>0.026758</td>\n",
              "      <td>0.117310</td>\n",
              "      <td>4.88300</td>\n",
              "      <td>0.085222</td>\n",
              "      <td>0.032396</td>\n",
              "      <td>0.116092</td>\n",
              "      <td>-0.001689</td>\n",
              "      <td>-0.520069</td>\n",
              "      <td>2.14112</td>\n",
              "      <td>0.124464</td>\n",
              "      <td>0.148209</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>-0.014077</td>\n",
              "      <td>0.24600</td>\n",
              "      <td>779.9670</td>\n",
              "      <td>1.89064</td>\n",
              "      <td>0.006948</td>\n",
              "      <td>1.53112</td>\n",
              "      <td>2.69800</td>\n",
              "      <td>4.517330</td>\n",
              "      <td>4.50332</td>\n",
              "      <td>0.123494</td>\n",
              "      <td>1.002680</td>\n",
              "      <td>4.869600</td>\n",
              "      <td>0.058411</td>\n",
              "      <td>2.497850</td>\n",
              "      <td>1.23843</td>\n",
              "      <td>2.348360</td>\n",
              "      <td>0.175475</td>\n",
              "      <td>1.608890</td>\n",
              "      <td>2.02881</td>\n",
              "      <td>0.042086</td>\n",
              "      <td>0.005141</td>\n",
              "      <td>0.076506</td>\n",
              "      <td>1.65122</td>\n",
              "      <td>0.111813</td>\n",
              "      <td>0.121641</td>\n",
              "      <td>0.58912</td>\n",
              "      <td>4.23692</td>\n",
              "      <td>-0.032843</td>\n",
              "      <td>0.058168</td>\n",
              "      <td>0.712927</td>\n",
              "      <td>0.097465</td>\n",
              "      <td>0.072744</td>\n",
              "      <td>0.000324</td>\n",
              "      <td>0.063362</td>\n",
              "      <td>4.063820</td>\n",
              "      <td>25.3824</td>\n",
              "      <td>0.576572</td>\n",
              "      <td>2.026210</td>\n",
              "      <td>2.96843</td>\n",
              "      <td>...</td>\n",
              "      <td>0.110884</td>\n",
              "      <td>0.026837</td>\n",
              "      <td>2.931160</td>\n",
              "      <td>0.068112</td>\n",
              "      <td>-0.495192</td>\n",
              "      <td>1.345280</td>\n",
              "      <td>2.242750</td>\n",
              "      <td>0.035611</td>\n",
              "      <td>-0.139274</td>\n",
              "      <td>4.74243</td>\n",
              "      <td>3.292740</td>\n",
              "      <td>0.117877</td>\n",
              "      <td>0.065605</td>\n",
              "      <td>0.556711</td>\n",
              "      <td>-0.058029</td>\n",
              "      <td>0.070501</td>\n",
              "      <td>1.101250</td>\n",
              "      <td>0.068559</td>\n",
              "      <td>0.162928</td>\n",
              "      <td>4.070180</td>\n",
              "      <td>-0.008835</td>\n",
              "      <td>3.89678</td>\n",
              "      <td>0.913739</td>\n",
              "      <td>-0.163204</td>\n",
              "      <td>3.074850</td>\n",
              "      <td>4.356780</td>\n",
              "      <td>-0.048894</td>\n",
              "      <td>4.917990</td>\n",
              "      <td>0.069930</td>\n",
              "      <td>-0.015347</td>\n",
              "      <td>3.47439</td>\n",
              "      <td>-0.017103</td>\n",
              "      <td>-0.008100</td>\n",
              "      <td>0.062013</td>\n",
              "      <td>0.041193</td>\n",
              "      <td>0.511657</td>\n",
              "      <td>1.96860</td>\n",
              "      <td>0.040017</td>\n",
              "      <td>0.044873</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>-0.003259</td>\n",
              "      <td>3.71542</td>\n",
              "      <td>156.1280</td>\n",
              "      <td>2.14772</td>\n",
              "      <td>0.018284</td>\n",
              "      <td>2.09859</td>\n",
              "      <td>4.15492</td>\n",
              "      <td>-0.038236</td>\n",
              "      <td>3.37145</td>\n",
              "      <td>0.034166</td>\n",
              "      <td>0.711483</td>\n",
              "      <td>0.769988</td>\n",
              "      <td>0.057555</td>\n",
              "      <td>0.957257</td>\n",
              "      <td>3.71145</td>\n",
              "      <td>5.464350</td>\n",
              "      <td>0.287104</td>\n",
              "      <td>2.616950</td>\n",
              "      <td>1.38403</td>\n",
              "      <td>0.074883</td>\n",
              "      <td>-0.010543</td>\n",
              "      <td>0.109121</td>\n",
              "      <td>2.27602</td>\n",
              "      <td>0.008023</td>\n",
              "      <td>0.045236</td>\n",
              "      <td>4.35954</td>\n",
              "      <td>5.07562</td>\n",
              "      <td>-0.009376</td>\n",
              "      <td>0.528966</td>\n",
              "      <td>4.053350</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.106828</td>\n",
              "      <td>0.051307</td>\n",
              "      <td>0.045939</td>\n",
              "      <td>3.402460</td>\n",
              "      <td>15.5615</td>\n",
              "      <td>1.635960</td>\n",
              "      <td>0.047029</td>\n",
              "      <td>4.01771</td>\n",
              "      <td>...</td>\n",
              "      <td>0.075586</td>\n",
              "      <td>0.032114</td>\n",
              "      <td>-0.042284</td>\n",
              "      <td>0.047974</td>\n",
              "      <td>-0.294184</td>\n",
              "      <td>5.065600</td>\n",
              "      <td>1.050290</td>\n",
              "      <td>0.034019</td>\n",
              "      <td>0.024611</td>\n",
              "      <td>3.12578</td>\n",
              "      <td>2.262840</td>\n",
              "      <td>0.082462</td>\n",
              "      <td>-0.023296</td>\n",
              "      <td>5.615850</td>\n",
              "      <td>0.086238</td>\n",
              "      <td>0.157568</td>\n",
              "      <td>3.725670</td>\n",
              "      <td>0.061247</td>\n",
              "      <td>0.086603</td>\n",
              "      <td>0.607246</td>\n",
              "      <td>1.411090</td>\n",
              "      <td>2.06062</td>\n",
              "      <td>-0.023154</td>\n",
              "      <td>0.011234</td>\n",
              "      <td>2.155530</td>\n",
              "      <td>0.914518</td>\n",
              "      <td>0.044521</td>\n",
              "      <td>0.375731</td>\n",
              "      <td>0.134351</td>\n",
              "      <td>0.013781</td>\n",
              "      <td>1.91059</td>\n",
              "      <td>-0.042943</td>\n",
              "      <td>0.105616</td>\n",
              "      <td>0.125072</td>\n",
              "      <td>0.037509</td>\n",
              "      <td>1.043790</td>\n",
              "      <td>1.07481</td>\n",
              "      <td>-0.012819</td>\n",
              "      <td>0.072798</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 102 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   id        f0       f1        f2  ...      f97       f98       f99  target\n",
              "0   0  0.106643  3.59437  132.8040  ...  1.97877  0.085974  0.240496       0\n",
              "1   1  0.125021  1.67336   76.5336  ...  2.57786 -0.020877  0.024719       0\n",
              "2   2  0.036330  1.49747  233.5460  ...  2.14112  0.124464  0.148209       0\n",
              "3   3 -0.014077  0.24600  779.9670  ...  1.96860  0.040017  0.044873       0\n",
              "4   4 -0.003259  3.71542  156.1280  ...  1.07481 -0.012819  0.072798       1\n",
              "\n",
              "[5 rows x 102 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ocA8RT8bp3hE"
      },
      "source": [
        "# target and features\n",
        "X = data.drop(['id', 'target'], axis=1).values\n",
        "y = data['target'].values\n",
        "\n",
        "# scale the X variables\n",
        "ss = StandardScaler()\n",
        "X_scaled = ss.fit_transform(X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 762
        },
        "id": "JWBAwFphqrvl",
        "outputId": "f91bbe4e-67a4-445d-cd1f-ed950baef0af"
      },
      "source": [
        "# define the first model\n",
        "\n",
        "# LecunNormal() is the initializer for selu\n",
        "from tensorflow.keras.initializers import lecun_normal\n",
        "\n",
        "model_1 = keras.Sequential([\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal(), input_shape=(100,)),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.5),\n",
        "    keras.layers.Dense(64, activation='selu', kernel_initializer = lecun_normal())\n",
        "])\n",
        "\n",
        "\n",
        "model_2 = keras.Sequential([\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal(), input_shape=(100,)),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(128, activation='selu', kernel_initializer = lecun_normal()),\n",
        "    keras.layers.AlphaDropout(0.4),\n",
        "    keras.layers.Dense(64, activation='selu', kernel_initializer = lecun_normal())\n",
        "])\n",
        "\n",
        "layer = keras.layers.Concatenate()([model_1.output, model_2.output])\n",
        "layer = keras.layers.AlphaDropout(0.4)(layer)\n",
        "layer = keras.layers.Dense(2, activation='sigmoid')(layer)\n",
        "\n",
        "model = keras.Model(\n",
        "    inputs=[model_1.input, model_2.input],\n",
        "    outputs = [layer]\n",
        ")\n",
        "\n",
        "\n",
        "model.compile(\n",
        "    loss = 'binary_crossentropy',\n",
        "    optimizer = keras.optimizers.Nadam(learning_rate=0.0001),\n",
        "    metrics=['acc']\n",
        ")\n",
        "\n",
        "# callbacks\n",
        "\n",
        "def scheduler(epoch, lr):\n",
        "    lr = 0.0001\n",
        "    if epoch < 10:\n",
        "        return lr\n",
        "    elif epoch < 20:\n",
        "        return lr/10\n",
        "    else:\n",
        "        return lr * np.exp(-0.1)\n",
        "    \n",
        "cb_ls = keras.callbacks.LearningRateScheduler(\n",
        "    scheduler\n",
        ")\n",
        "\n",
        "os.makedirs('./model', exist_ok=True)\n",
        "\n",
        "cb_cp = keras.callbacks.ModelCheckpoint(\n",
        "    filepath='./model/model_test_previous.h5',\n",
        "    monitor = 'val_acc',\n",
        "    save_best_only=True\n",
        ")\n",
        "\n",
        "cb_es = keras.callbacks.EarlyStopping(\n",
        "    monitor='val_acc',\n",
        "    patience=10    \n",
        ")\n",
        "\n",
        "history = model.fit(\n",
        "    (X_scaled, X_scaled), y,\n",
        "    epochs=100, \n",
        "    batch_size=32,\n",
        "    validation_split=0.1,\n",
        "    callbacks=[\n",
        "        cb_cp, cb_ls, cb_es\n",
        "    ]\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-eecc8f05cf95>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m     callbacks=[\n\u001b[0;32m---> 90\u001b[0;31m         \u001b[0mcb_cp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcb_ls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcb_es\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m     ]\n\u001b[1;32m     92\u001b[0m )\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1127\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1128\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1129\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1130\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1131\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 878, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 867, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 860, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 810, in train_step\n        y, y_pred, sample_weight, regularization_losses=self.losses)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/compile_utils.py\", line 201, in __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 141, in __call__\n        losses = call_fn(y_true, y_pred)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 245, in call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 1807, in binary_crossentropy\n        backend.binary_crossentropy(y_true, y_pred, from_logits=from_logits),\n    File \"/usr/local/lib/python3.7/dist-packages/keras/backend.py\", line 5158, in binary_crossentropy\n        return tf.nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n\n    ValueError: `logits` and `labels` must have the same shape, received ((32, 2) vs (32, 1)).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rQAG3i1sqsZj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "bf26faf5-e7c8-41ea-b86a-1130f192766f"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "pd.DataFrame(\n",
        "    history.history\n",
        ")[['acc', 'val_acc']].plot()\n",
        "plt.grid()\n",
        "plt.show();"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AU2dZxol42DE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "outputId": "dba956b9-8fe2-4f77-cca8-458ceb62909f"
      },
      "source": [
        "pd.DataFrame(\n",
        "    history.history\n",
        ")[['loss', 'val_loss']].plot()\n",
        "plt.grid()\n",
        "plt.show();"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aJSqykaNZaXd",
        "outputId": "81c7e5c7-360f-49c7-d6bf-462a185f4fe4"
      },
      "source": [
        "import numpy as np\n",
        "np.max(history.history['val_acc'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7475166916847229"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L79MhDTSd4Sy"
      },
      "source": [
        "# predict with the best model\n",
        "model = tf.keras.models.load_model('./model/model_test_previous.h5')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xCcXLXJY9Myw",
        "outputId": "344fe4dc-f3eb-416b-ab2c-178e6542fb1c"
      },
      "source": [
        "with zipfile.ZipFile('./test.csv.zip') as z:\n",
        "    z.extractall('./data/extract')\n",
        "\n",
        "os.listdir('./data/extract')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['test.csv', 'train.csv']"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "a0wb7Icb9omJ",
        "outputId": "447de8da-b28e-4ffe-c282-5c4beb0d4943"
      },
      "source": [
        "test = pd.read_csv('./data/extract/test.csv')\n",
        "test.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>f0</th>\n",
              "      <th>f1</th>\n",
              "      <th>f2</th>\n",
              "      <th>f3</th>\n",
              "      <th>f4</th>\n",
              "      <th>f5</th>\n",
              "      <th>f6</th>\n",
              "      <th>f7</th>\n",
              "      <th>f8</th>\n",
              "      <th>f9</th>\n",
              "      <th>f10</th>\n",
              "      <th>f11</th>\n",
              "      <th>f12</th>\n",
              "      <th>f13</th>\n",
              "      <th>f14</th>\n",
              "      <th>f15</th>\n",
              "      <th>f16</th>\n",
              "      <th>f17</th>\n",
              "      <th>f18</th>\n",
              "      <th>f19</th>\n",
              "      <th>f20</th>\n",
              "      <th>f21</th>\n",
              "      <th>f22</th>\n",
              "      <th>f23</th>\n",
              "      <th>f24</th>\n",
              "      <th>f25</th>\n",
              "      <th>f26</th>\n",
              "      <th>f27</th>\n",
              "      <th>f28</th>\n",
              "      <th>f29</th>\n",
              "      <th>f30</th>\n",
              "      <th>f31</th>\n",
              "      <th>f32</th>\n",
              "      <th>f33</th>\n",
              "      <th>f34</th>\n",
              "      <th>f35</th>\n",
              "      <th>f36</th>\n",
              "      <th>f37</th>\n",
              "      <th>f38</th>\n",
              "      <th>...</th>\n",
              "      <th>f60</th>\n",
              "      <th>f61</th>\n",
              "      <th>f62</th>\n",
              "      <th>f63</th>\n",
              "      <th>f64</th>\n",
              "      <th>f65</th>\n",
              "      <th>f66</th>\n",
              "      <th>f67</th>\n",
              "      <th>f68</th>\n",
              "      <th>f69</th>\n",
              "      <th>f70</th>\n",
              "      <th>f71</th>\n",
              "      <th>f72</th>\n",
              "      <th>f73</th>\n",
              "      <th>f74</th>\n",
              "      <th>f75</th>\n",
              "      <th>f76</th>\n",
              "      <th>f77</th>\n",
              "      <th>f78</th>\n",
              "      <th>f79</th>\n",
              "      <th>f80</th>\n",
              "      <th>f81</th>\n",
              "      <th>f82</th>\n",
              "      <th>f83</th>\n",
              "      <th>f84</th>\n",
              "      <th>f85</th>\n",
              "      <th>f86</th>\n",
              "      <th>f87</th>\n",
              "      <th>f88</th>\n",
              "      <th>f89</th>\n",
              "      <th>f90</th>\n",
              "      <th>f91</th>\n",
              "      <th>f92</th>\n",
              "      <th>f93</th>\n",
              "      <th>f94</th>\n",
              "      <th>f95</th>\n",
              "      <th>f96</th>\n",
              "      <th>f97</th>\n",
              "      <th>f98</th>\n",
              "      <th>f99</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>600000</td>\n",
              "      <td>0.003229</td>\n",
              "      <td>4.838660</td>\n",
              "      <td>585.529</td>\n",
              "      <td>2.282910</td>\n",
              "      <td>0.713180</td>\n",
              "      <td>3.907830</td>\n",
              "      <td>0.480696</td>\n",
              "      <td>1.482270</td>\n",
              "      <td>4.891810</td>\n",
              "      <td>0.056351</td>\n",
              "      <td>4.200990</td>\n",
              "      <td>3.151800</td>\n",
              "      <td>0.000349</td>\n",
              "      <td>1.85116</td>\n",
              "      <td>2.63889</td>\n",
              "      <td>0.746668</td>\n",
              "      <td>-0.004756</td>\n",
              "      <td>1.610300</td>\n",
              "      <td>4.11482</td>\n",
              "      <td>-0.077756</td>\n",
              "      <td>0.129446</td>\n",
              "      <td>0.053324</td>\n",
              "      <td>0.416789</td>\n",
              "      <td>0.445009</td>\n",
              "      <td>0.150464</td>\n",
              "      <td>5.021300</td>\n",
              "      <td>2.22139</td>\n",
              "      <td>-0.072333</td>\n",
              "      <td>-0.215874</td>\n",
              "      <td>1.56236</td>\n",
              "      <td>0.074880</td>\n",
              "      <td>0.010050</td>\n",
              "      <td>0.018582</td>\n",
              "      <td>0.067466</td>\n",
              "      <td>5.57830</td>\n",
              "      <td>3.08556</td>\n",
              "      <td>3.842470</td>\n",
              "      <td>0.011125</td>\n",
              "      <td>2.35997</td>\n",
              "      <td>...</td>\n",
              "      <td>0.027517</td>\n",
              "      <td>0.048825</td>\n",
              "      <td>0.074626</td>\n",
              "      <td>0.041264</td>\n",
              "      <td>0.069319</td>\n",
              "      <td>4.248810</td>\n",
              "      <td>2.09195</td>\n",
              "      <td>0.695042</td>\n",
              "      <td>0.007464</td>\n",
              "      <td>-0.017882</td>\n",
              "      <td>1.883500</td>\n",
              "      <td>1.268030</td>\n",
              "      <td>0.023747</td>\n",
              "      <td>0.043071</td>\n",
              "      <td>3.174780</td>\n",
              "      <td>0.074356</td>\n",
              "      <td>0.125909</td>\n",
              "      <td>3.926430</td>\n",
              "      <td>0.046914</td>\n",
              "      <td>-0.042290</td>\n",
              "      <td>3.01925</td>\n",
              "      <td>0.089564</td>\n",
              "      <td>3.20070</td>\n",
              "      <td>0.009679</td>\n",
              "      <td>-0.099653</td>\n",
              "      <td>3.573060</td>\n",
              "      <td>4.79727</td>\n",
              "      <td>0.091985</td>\n",
              "      <td>0.773543</td>\n",
              "      <td>0.073380</td>\n",
              "      <td>0.112910</td>\n",
              "      <td>1.073550</td>\n",
              "      <td>0.122149</td>\n",
              "      <td>0.086330</td>\n",
              "      <td>0.036010</td>\n",
              "      <td>0.010619</td>\n",
              "      <td>0.290343</td>\n",
              "      <td>1.898200</td>\n",
              "      <td>0.131533</td>\n",
              "      <td>0.012047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>600001</td>\n",
              "      <td>0.008602</td>\n",
              "      <td>0.505536</td>\n",
              "      <td>-100.099</td>\n",
              "      <td>3.012670</td>\n",
              "      <td>0.027199</td>\n",
              "      <td>1.194610</td>\n",
              "      <td>5.036620</td>\n",
              "      <td>2.517440</td>\n",
              "      <td>4.553890</td>\n",
              "      <td>0.063876</td>\n",
              "      <td>0.337257</td>\n",
              "      <td>4.439690</td>\n",
              "      <td>0.013188</td>\n",
              "      <td>3.37901</td>\n",
              "      <td>3.38470</td>\n",
              "      <td>1.167400</td>\n",
              "      <td>2.246550</td>\n",
              "      <td>1.750170</td>\n",
              "      <td>2.76624</td>\n",
              "      <td>-0.058501</td>\n",
              "      <td>0.012595</td>\n",
              "      <td>0.036144</td>\n",
              "      <td>0.769057</td>\n",
              "      <td>0.017496</td>\n",
              "      <td>0.050283</td>\n",
              "      <td>0.324697</td>\n",
              "      <td>4.94864</td>\n",
              "      <td>0.124789</td>\n",
              "      <td>0.347128</td>\n",
              "      <td>1.24512</td>\n",
              "      <td>0.035822</td>\n",
              "      <td>-0.013188</td>\n",
              "      <td>0.023194</td>\n",
              "      <td>0.006444</td>\n",
              "      <td>4.98333</td>\n",
              "      <td>23.70690</td>\n",
              "      <td>8.287290</td>\n",
              "      <td>4.796230</td>\n",
              "      <td>1.79928</td>\n",
              "      <td>...</td>\n",
              "      <td>0.067650</td>\n",
              "      <td>0.066438</td>\n",
              "      <td>0.034258</td>\n",
              "      <td>0.606144</td>\n",
              "      <td>0.019988</td>\n",
              "      <td>-0.456704</td>\n",
              "      <td>3.37877</td>\n",
              "      <td>1.900050</td>\n",
              "      <td>0.052316</td>\n",
              "      <td>-0.050397</td>\n",
              "      <td>2.612950</td>\n",
              "      <td>3.112540</td>\n",
              "      <td>0.022305</td>\n",
              "      <td>0.108325</td>\n",
              "      <td>4.617640</td>\n",
              "      <td>0.091440</td>\n",
              "      <td>0.039368</td>\n",
              "      <td>3.035190</td>\n",
              "      <td>1.023050</td>\n",
              "      <td>-0.020578</td>\n",
              "      <td>2.77156</td>\n",
              "      <td>3.309480</td>\n",
              "      <td>5.05840</td>\n",
              "      <td>-0.003993</td>\n",
              "      <td>0.067636</td>\n",
              "      <td>0.995391</td>\n",
              "      <td>2.47165</td>\n",
              "      <td>-0.015214</td>\n",
              "      <td>0.263423</td>\n",
              "      <td>-0.021910</td>\n",
              "      <td>-0.020214</td>\n",
              "      <td>2.622340</td>\n",
              "      <td>0.123307</td>\n",
              "      <td>0.033063</td>\n",
              "      <td>0.123059</td>\n",
              "      <td>0.005771</td>\n",
              "      <td>-0.392923</td>\n",
              "      <td>3.689640</td>\n",
              "      <td>0.047418</td>\n",
              "      <td>0.120015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>600002</td>\n",
              "      <td>1.461000</td>\n",
              "      <td>2.437260</td>\n",
              "      <td>-112.964</td>\n",
              "      <td>3.541230</td>\n",
              "      <td>0.752338</td>\n",
              "      <td>4.338310</td>\n",
              "      <td>1.648080</td>\n",
              "      <td>4.699910</td>\n",
              "      <td>1.950250</td>\n",
              "      <td>0.005303</td>\n",
              "      <td>2.071680</td>\n",
              "      <td>0.546499</td>\n",
              "      <td>0.141781</td>\n",
              "      <td>1.67317</td>\n",
              "      <td>4.30649</td>\n",
              "      <td>1.702330</td>\n",
              "      <td>-0.062869</td>\n",
              "      <td>1.619230</td>\n",
              "      <td>4.19053</td>\n",
              "      <td>0.055140</td>\n",
              "      <td>-0.016590</td>\n",
              "      <td>0.017805</td>\n",
              "      <td>3.064810</td>\n",
              "      <td>0.070370</td>\n",
              "      <td>0.098316</td>\n",
              "      <td>3.507540</td>\n",
              "      <td>1.06910</td>\n",
              "      <td>0.012750</td>\n",
              "      <td>0.009981</td>\n",
              "      <td>3.46781</td>\n",
              "      <td>0.035920</td>\n",
              "      <td>-0.009804</td>\n",
              "      <td>0.065728</td>\n",
              "      <td>-0.004725</td>\n",
              "      <td>5.28102</td>\n",
              "      <td>11.52880</td>\n",
              "      <td>0.171694</td>\n",
              "      <td>4.394570</td>\n",
              "      <td>2.52084</td>\n",
              "      <td>...</td>\n",
              "      <td>0.065172</td>\n",
              "      <td>-0.003328</td>\n",
              "      <td>-0.001950</td>\n",
              "      <td>0.095007</td>\n",
              "      <td>0.080267</td>\n",
              "      <td>3.337300</td>\n",
              "      <td>3.60489</td>\n",
              "      <td>4.694580</td>\n",
              "      <td>0.075650</td>\n",
              "      <td>-0.088276</td>\n",
              "      <td>1.772440</td>\n",
              "      <td>-0.142226</td>\n",
              "      <td>0.000918</td>\n",
              "      <td>0.021483</td>\n",
              "      <td>0.241844</td>\n",
              "      <td>0.067591</td>\n",
              "      <td>-0.026572</td>\n",
              "      <td>0.894909</td>\n",
              "      <td>0.111606</td>\n",
              "      <td>0.524423</td>\n",
              "      <td>1.45007</td>\n",
              "      <td>0.019355</td>\n",
              "      <td>1.27135</td>\n",
              "      <td>0.076042</td>\n",
              "      <td>0.446993</td>\n",
              "      <td>4.406990</td>\n",
              "      <td>2.44697</td>\n",
              "      <td>-0.041154</td>\n",
              "      <td>0.212414</td>\n",
              "      <td>0.141005</td>\n",
              "      <td>-0.011036</td>\n",
              "      <td>2.030180</td>\n",
              "      <td>-0.000426</td>\n",
              "      <td>0.084091</td>\n",
              "      <td>0.123605</td>\n",
              "      <td>0.499554</td>\n",
              "      <td>4.054650</td>\n",
              "      <td>3.330670</td>\n",
              "      <td>0.108843</td>\n",
              "      <td>0.064687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>600003</td>\n",
              "      <td>0.140556</td>\n",
              "      <td>3.085610</td>\n",
              "      <td>179.451</td>\n",
              "      <td>0.573945</td>\n",
              "      <td>0.057342</td>\n",
              "      <td>2.216790</td>\n",
              "      <td>1.623480</td>\n",
              "      <td>0.526174</td>\n",
              "      <td>1.542540</td>\n",
              "      <td>-0.026161</td>\n",
              "      <td>1.609440</td>\n",
              "      <td>1.723560</td>\n",
              "      <td>-0.019564</td>\n",
              "      <td>1.55213</td>\n",
              "      <td>4.83264</td>\n",
              "      <td>1.501640</td>\n",
              "      <td>0.192669</td>\n",
              "      <td>4.614890</td>\n",
              "      <td>1.47069</td>\n",
              "      <td>-0.010031</td>\n",
              "      <td>0.072805</td>\n",
              "      <td>0.048035</td>\n",
              "      <td>3.230210</td>\n",
              "      <td>-0.031548</td>\n",
              "      <td>0.028697</td>\n",
              "      <td>3.752520</td>\n",
              "      <td>4.94847</td>\n",
              "      <td>-0.174542</td>\n",
              "      <td>-0.033491</td>\n",
              "      <td>2.47823</td>\n",
              "      <td>0.068129</td>\n",
              "      <td>0.090797</td>\n",
              "      <td>0.029877</td>\n",
              "      <td>0.146718</td>\n",
              "      <td>3.16983</td>\n",
              "      <td>-12.98460</td>\n",
              "      <td>3.135210</td>\n",
              "      <td>1.765010</td>\n",
              "      <td>3.25399</td>\n",
              "      <td>...</td>\n",
              "      <td>0.075775</td>\n",
              "      <td>-0.008900</td>\n",
              "      <td>0.141776</td>\n",
              "      <td>0.173123</td>\n",
              "      <td>0.012894</td>\n",
              "      <td>3.390590</td>\n",
              "      <td>2.69899</td>\n",
              "      <td>0.059916</td>\n",
              "      <td>0.055400</td>\n",
              "      <td>-0.000140</td>\n",
              "      <td>2.641440</td>\n",
              "      <td>0.839721</td>\n",
              "      <td>-0.026268</td>\n",
              "      <td>0.058745</td>\n",
              "      <td>2.521910</td>\n",
              "      <td>0.118737</td>\n",
              "      <td>0.134899</td>\n",
              "      <td>2.839480</td>\n",
              "      <td>0.108751</td>\n",
              "      <td>-0.015848</td>\n",
              "      <td>1.14724</td>\n",
              "      <td>0.390064</td>\n",
              "      <td>3.30923</td>\n",
              "      <td>-0.046117</td>\n",
              "      <td>-0.206052</td>\n",
              "      <td>2.373770</td>\n",
              "      <td>3.15941</td>\n",
              "      <td>0.131234</td>\n",
              "      <td>1.031180</td>\n",
              "      <td>0.026155</td>\n",
              "      <td>0.050117</td>\n",
              "      <td>0.221613</td>\n",
              "      <td>0.045298</td>\n",
              "      <td>0.129966</td>\n",
              "      <td>0.004015</td>\n",
              "      <td>0.018279</td>\n",
              "      <td>2.696580</td>\n",
              "      <td>-0.533491</td>\n",
              "      <td>0.052524</td>\n",
              "      <td>0.011058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>600004</td>\n",
              "      <td>0.128876</td>\n",
              "      <td>5.199760</td>\n",
              "      <td>107.466</td>\n",
              "      <td>-0.497149</td>\n",
              "      <td>0.080220</td>\n",
              "      <td>0.458121</td>\n",
              "      <td>0.629839</td>\n",
              "      <td>5.240460</td>\n",
              "      <td>-0.232279</td>\n",
              "      <td>0.030006</td>\n",
              "      <td>0.481359</td>\n",
              "      <td>2.176020</td>\n",
              "      <td>0.193162</td>\n",
              "      <td>1.39209</td>\n",
              "      <td>2.51890</td>\n",
              "      <td>2.993170</td>\n",
              "      <td>4.170910</td>\n",
              "      <td>0.318375</td>\n",
              "      <td>4.84563</td>\n",
              "      <td>0.085064</td>\n",
              "      <td>0.026443</td>\n",
              "      <td>-0.004559</td>\n",
              "      <td>0.120327</td>\n",
              "      <td>-0.008630</td>\n",
              "      <td>0.004495</td>\n",
              "      <td>4.921700</td>\n",
              "      <td>1.68564</td>\n",
              "      <td>0.095628</td>\n",
              "      <td>0.189131</td>\n",
              "      <td>2.56955</td>\n",
              "      <td>0.046643</td>\n",
              "      <td>0.111462</td>\n",
              "      <td>0.002912</td>\n",
              "      <td>0.060737</td>\n",
              "      <td>4.25300</td>\n",
              "      <td>38.70340</td>\n",
              "      <td>0.170825</td>\n",
              "      <td>-0.598784</td>\n",
              "      <td>3.92796</td>\n",
              "      <td>...</td>\n",
              "      <td>0.123505</td>\n",
              "      <td>0.011181</td>\n",
              "      <td>0.152410</td>\n",
              "      <td>0.118767</td>\n",
              "      <td>-0.054951</td>\n",
              "      <td>4.841230</td>\n",
              "      <td>3.39522</td>\n",
              "      <td>3.737320</td>\n",
              "      <td>0.053328</td>\n",
              "      <td>0.143619</td>\n",
              "      <td>-0.156581</td>\n",
              "      <td>-0.257201</td>\n",
              "      <td>0.987785</td>\n",
              "      <td>0.038284</td>\n",
              "      <td>2.765120</td>\n",
              "      <td>0.040994</td>\n",
              "      <td>0.173981</td>\n",
              "      <td>1.112190</td>\n",
              "      <td>-0.030675</td>\n",
              "      <td>0.137178</td>\n",
              "      <td>1.55014</td>\n",
              "      <td>0.401083</td>\n",
              "      <td>1.74053</td>\n",
              "      <td>0.096331</td>\n",
              "      <td>0.445268</td>\n",
              "      <td>4.392460</td>\n",
              "      <td>2.52818</td>\n",
              "      <td>-0.037385</td>\n",
              "      <td>0.117148</td>\n",
              "      <td>-0.010128</td>\n",
              "      <td>0.058860</td>\n",
              "      <td>2.660430</td>\n",
              "      <td>0.135425</td>\n",
              "      <td>0.036481</td>\n",
              "      <td>0.093912</td>\n",
              "      <td>0.056315</td>\n",
              "      <td>1.110710</td>\n",
              "      <td>3.584470</td>\n",
              "      <td>0.145319</td>\n",
              "      <td>-0.050393</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 101 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       id        f0        f1       f2  ...       f96       f97       f98       f99\n",
              "0  600000  0.003229  4.838660  585.529  ...  0.290343  1.898200  0.131533  0.012047\n",
              "1  600001  0.008602  0.505536 -100.099  ... -0.392923  3.689640  0.047418  0.120015\n",
              "2  600002  1.461000  2.437260 -112.964  ...  4.054650  3.330670  0.108843  0.064687\n",
              "3  600003  0.140556  3.085610  179.451  ...  2.696580 -0.533491  0.052524  0.011058\n",
              "4  600004  0.128876  5.199760  107.466  ...  1.110710  3.584470  0.145319 -0.050393\n",
              "\n",
              "[5 rows x 101 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EMvHoGOT93wu"
      },
      "source": [
        "x_test = test.drop('id', axis=1).values\n",
        "x_test = ss.transform(x_test)\n",
        "pred = model.predict([x_test, x_test])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "QTTC9aY-9-xM",
        "outputId": "c85c110c-4339-47c4-eacf-fbaf071b49c6"
      },
      "source": [
        "submission = pd.DataFrame({\n",
        "    'id': test['id'].values,\n",
        "    'target': np.where (pred > 0.5, 1, 0).reshape(-1)\n",
        "})\n",
        "\n",
        "print(f'value counts: {submission[\"target\"].value_counts()}')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-99575b9dd57c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m submission = pd.DataFrame({\n\u001b[1;32m      2\u001b[0m     \u001b[0;34m'id'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;34m'target'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhere\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m })\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    466\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    467\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 468\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minit_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    469\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    470\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36minit_dict\u001b[0;34m(data, index, columns, dtype)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0marr\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_datetime64tz_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         ]\n\u001b[0;32m--> 283\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, arr_names, index, columns, dtype, verify_integrity)\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mextract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw_lengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"arrays must all be same length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    398\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhave_dicts\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: arrays must all be same length"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sdUKlOTR_XJw"
      },
      "source": [
        "# to submitt the prediction to kaggle\n",
        "# !kaggle competitions submit -c tabular-playground-series-nov-2021 -f submission.csv -m \"from colab test\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z3TOqYOtCfKV",
        "outputId": "ef163ba6-4678-4f4e-e965-742cd41b080e"
      },
      "source": [
        "np.where(pred > .5, 1, 0).reshape(-1).shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1080000,)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tdPku_5IjQhB"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}